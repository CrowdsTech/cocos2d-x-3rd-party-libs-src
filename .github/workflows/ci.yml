#
# Copyright (C) 2021 Crowds Technologies LLC. All rights reserved.
#
# Distributed under MIT License
# See: https://github.com/CrowdsTech/cocos2d-x-CI/blob/main/LICENSE
#

name: CI

on:
  push:
    paths:
    - '.github/workflows/ci.yml'

jobs:
  build:
    strategy:
      matrix:
        include:
          - variation: mac
            host: mac
            os: macos-latest
          - variation: ios
            host: mac
            os: macos-latest
          - variation: tvos
            host: mac
            os: macos-latest
          - variation: linux
            host: linux
            os: ubuntu-latest
          - variation: android
            host: linux
            os: ubuntu-latest
          - variation: tizen
            host: linux
            os: ubuntu-latest
      fail-fast: false
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./build
    continue-on-error: true

    steps:
    - name: Checkout Sources
      timeout-minutes: 1
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Setup Environment
      timeout-minutes: 1
      run: |
        set -x
        echo  "ANDROID_NDK=${ANDROID_NDK_ROOT}" >> $GITHUB_ENV
        set
    - name: Install Dependencies (macOS)
      run: brew install automake libtool
      if: matrix.host == 'mac'
      timeout-minutes: 8
    - name: Install Dependencies (Tizen)
      run: |
        curl http://download.tizen.org/sdk/Installer/tizen-studio_6.0/web-cli_Tizen_Studio_6.0_ubuntu-64.bin -o install.bin
        chmod a+x install.bin
        ./install.bin --accept-license ${HOME}/tizen-studio
        echo  "TIZEN_STUDIO_HOME=${HOME}/tizen-studio" >> $GITHUB_ENV
        rm install.bin
      if: matrix.variation == 'tizen'
      timeout-minutes: 8
    - name: zlib
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=zlib
    - name: jpeg
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=jpeg
    - name: tiff
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=tiff
    - name: webp
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=webp
    - name: png
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=png
    - name: freetype
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=freetype
    - name: chipmunk
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=chipmunk
    - name: uv
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=uv
      if: matrix.variation != 'tizen'
    - name: openssl
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=openssl
    - name: curl
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=curl
    - name: websockets
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=websockets
    - name: bullet
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=bullet
      if: matrix.variation != 'tizen' && matrix.variation != 'tvos'
    - name: box2d
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=box2d
      if: matrix.variation != 'tizen' && matrix.variation != 'tvos'
    - name: glfw
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=glfw
      if: matrix.variation == 'linux' || matrix.variation == 'mac'
    - name: glsl_optimizer
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=glsl_optimizer
      if: matrix.variation == 'android' && matrix.variation == 'ios' && matrix.variation == 'mac'
    - name: rapidjson
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=rapidjson
      if: matrix.variation != 'android'
    - name: lua
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=lua
      if: matrix.variation != 'android'
    - name: luajit
      run: ./build.sh --platform=${{ matrix.variation }} --arch=all --mode=release --libs=luajit
    - name: SHA 512 Checksums
      run: find ../contrib/tarballs -depth 1 -type f | xargs shasum -a 512 || true

# android: "png" "zlib"       "luajit" "websockets" "curl" "freetype" "jpeg"  "tiff" "webp" "chipmunk" "openssl"             "bullet" "box2d" "uv"        "glsl_optimizer"
# ios:     "png" "zlib" "lua" "luajit" "websockets" "curl" "freetype" "jpeg"  "tiff" "webp" "chipmunk" "openssl" "rapidjson" "bullet" "box2d" "uv"        "glsl_optimizer"
# mac:     "png" "zlib" "lua" "luajit" "websockets" "curl" "freetype" "jpeg"  "tiff" "webp" "chipmunk" "openssl" "rapidjson" "bullet" "box2d" "uv" "glfw" "glsl_optimizer"
# linux:   "png" "zlib" "lua" "luajit" "websockets" "curl" "freetype" "jpeg"  "tiff" "webp" "chipmunk" "openssl" "rapidjson" "bullet" "box2d" "uv" "glfw"
# tizen:   "png" "zlib" "lua" "luajit" "websockets" "curl" "freetype" "jpeg"  "tiff" "webp" "chipmunk" "openssl" "rapidjson"
# tvos:    "png" "zlib" "lua" "luajit" "websockets" "curl" "freetype" "jpeg"  "tiff" "webp" "chipmunk" "openssl" "rapidjson"                  "uv"