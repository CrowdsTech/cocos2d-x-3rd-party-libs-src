#
# Copyright (C) 2021 Crowds Technologies LLC. All rights reserved.
#
# Distributed under MIT License
# See: https://github.com/CrowdsTech/cocos2d-x-CI/blob/main/LICENSE
#

name: CI

on:
  push:
    paths:
    - '.github/workflows/ci.yml'

jobs:
  build:
    strategy:
      matrix:
        include:
          - pltf: mac
            arch: arm64
            os: macos-latest
          - pltf: ios
            arch: arm64,armv7
            os: macos-latest
          - pltf: tvos
            arch: arm64
            os: macos-latest
          - pltf: linux
            arch: x86_64
            os: ubuntu-latest
          - pltf: android
            arch: arm64,armv7
            os: ubuntu-latest
          - pltf: tizen
            arch: armv7
            os: ubuntu-latest
      fail-fast: false
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./build

    steps:
    - name: Checkout Sources
      timeout-minutes: 1
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Setup Environment
      timeout-minutes: 1
      run: |
        echo  "ANDROID_NDK=${ANDROID_NDK_ROOT}" >> $GITHUB_ENV
        set
    - name: Install Dependencies (macOS)
      run: brew install automake libtool
      if: matrix.os == 'macos-latest'
      timeout-minutes: 8
    - name: Install Dependencies (Linux)
      run: |
        sudo apt-get update
        sudo apt-get install libgl1-mesa-dev libglew-dev libglfw3 libglfw3-dev
        if: matrix.pltf == 'linux'
        timeout-minutes: 10
      - name: Install Dependencies (Tizen)
      run: |
        curl http://download.tizen.org/sdk/Installer/tizen-studio_6.0/web-cli_Tizen_Studio_6.0_ubuntu-64.bin -o install.bin
        chmod a+x install.bin
        ./install.bin --accept-license ${HOME}/tizen-studio
        rm install.bin
        echo "TIZEN_STUDIO_HOME=${HOME}/tizen-studio" >> $GITHUB_ENV
        echo "${HOME}/tizen-studio/tools/ide/bin"     >> $GITHUB_PATH
        ${HOME}/tizen-studio/package-manager/package-manager-cli.bin install NativeCLI
      if: matrix.pltf == 'tizen'
    - name: zlib
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=zlib
      if: always()
    - name: jpeg
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=jpeg
      if: always()
    - name: tiff
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=tiff
      if: always()
    - name: webp
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=webp
      if: always()
    - name: png
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=png
      if: always()
    - name: freetype
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=freetype
      if: always()
    - name: chipmunk
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=chipmunk
      if: always()
    - name: uv
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=uv
      if: always() && matrix.pltf != 'tizen'
    - name: openssl
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=openssl
      if: always()
    - name: curl
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=curl
      if: always()
    - name: websockets
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=websockets
      if: always()
    - name: bullet
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=bullet
      if: always() && matrix.pltf != 'tizen' && matrix.pltf != 'tvos'
    - name: box2d
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=box2d
      if: always() && matrix.pltf != 'tizen' && matrix.pltf != 'tvos'
    - name: glfw
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=glfw
      if: always() && (matrix.pltf == 'linux' || matrix.pltf == 'mac')
    - name: glsl_optimizer
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=glsl_optimizer
      if: always() && matrix.pltf == 'android' && matrix.pltf == 'ios' && matrix.pltf == 'mac'
    - name: rapidjson
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=rapidjson
      if: always() && matrix.pltf != 'android'
    - name: lua
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=lua
      if: always() && matrix.pltf != 'android'
    - name: luajit
      run: ./build.sh --platform=${{ matrix.pltf }} --arch=${{ matrix.arch }} --mode=release --libs=luajit
      if: always()
    - name: SHA 512 Checksums
      run: find ../contrib/tarballs -maxdepth 1 -type f | xargs shasum -a 512
      if: always()
